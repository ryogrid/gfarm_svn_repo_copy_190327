#
# Test case for check behavior when gfsd network interface is down
# in writing files
#
load	"generate_testdata" \
	"wait_for_gfsd_connect"

#
# Test parameters
#
# GFARM_HOME:	A directory path of Gfarm which this test will be executed
# FILE_SIZE:	Size of a file to be created
# SLEEP_SEC:	Second to sleep before make network interface down
test_gfsd_ifdown_in_write()
{
	RESULT=$RESULT_PASS

	# default parameter
	GFARM_HOME=${GFARM_HOME-"/"}
	FILE_SIZE=${FILE_SIZE-"100M"}
	SLEEP_SEC=${SLEEP_SEC-"3"}
	RETRY_COUNT=${RETRY_COUNT-"20"}
	RETRY_INTERVAL=${RETRY_INTERVAL-"30"}

	# prepare: check whether required host is defined
	$GFSERVICE $DEBUG check_hostids_defined - "gfmd1 gfsd1 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	AUTH_TYPE=`$GFSERVICE $DEBUG get-config-gfarm-param gfmd1 AUTH_TYPE`
	if [ X$AUTH_TYPE = Xgsi ] || [ X$AUTH_TYPE = Xgsi_auth ]; then
		$GFSERVICE $DEBUG grid_proxy_init client1
	fi

	# prepare: wait until gfsd get connected
	wait_for_gfsd_connect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is unavailable"
		return $RESULT_FATAL
	fi

	# prepare: mount
	MOUNT_POINT=mnt_$TEST_EXEC_ID
	$GFSERVICE $DEBUG exec_ssh client1 mkdir $MOUNT_POINT
	$GFSERVICE $DEBUG mount client1 $MOUNT_POINT -o modules=subdir \
		-o subdir=$GFARM_HOME

	# step: make files in background
	GFARM_FILE1=$GFARM_HOME/${TEST_EXEC_ID}_1
	generate_testdata $FILE_SIZE | $GFSERVICE $DEBUG read_and_register \
		client1 $GFARM_FILE1 gfmd1 gfsd1 &
	MAKE_PID=$!

	# wait a bit for a process starts making files
	sleep $SLEEP_SEC

	# step: make network interface down
	$GFSERVICE $DEBUG ifdown gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifdown on gfsd1"
		return $RESULT_FATAL
	fi

	wait $MAKE_PID
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: unexpectedly suceeded to make a file"
		set_result RESULT $RESULT_XPASS
	fi

	# step: make network interface up
	$GFSERVICE $DEBUG ifup gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifup on gfsd1"
		return $RESULT_FATAL
	fi

	# step: wait until gfsd get connected
	wait_for_gfsd_connect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is unavailable"
		return $RESULT_FATAL
	fi

	# step: make files
	GFARM_FILE2=$MOUNT_POINT/${TEST_EXEC_ID}_2
	$GFSERVICE $DEBUG make_file client1 $GFARM_FILE2 $FILE_SIZE
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to write files"
		set_result RESULT $RESULT_FAIL
	fi

	GFARM_FILE3=$GFARM_HOME/${TEST_EXEC_ID}_3
	echo $TEST_EXEC_ID | $GFSERVICE $DEBUG read_and_register client1 \
		$GFARM_FILE3 gfmd1 gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to write files"
		set_result RESULT $RESULT_FAIL
	fi

	# cleanup: remove files
	$GFSERVICE $DEBUG exec_ssh client1 rm -f $GFARM_FILE2
	$GFSERVICE $DEBUG gfcmd client1 gfrm -f $GFARM_FILE1 $GFARM_FILE3

	# cleanup: unmount
	$GFSERVICE $DEBUG umount client1 $MOUNT_POINT
	$GFSERVICE $DEBUG exec_ssh client1 rmdir $MOUNT_POINT

	return $RESULT
}
