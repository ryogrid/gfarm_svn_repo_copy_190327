#
# Test case for operation when gfmd network interface is down
#

#
# Test parameters
#
# GFARM_HOME:	A directory path of Gfarm which this test will be executed
test_operation_in_gfmd_ifdown()
{
	RESULT=$RESULT_PASS

	# default parameter
	GFARM_HOME=${GFARM_HOME-"/"}

	# prepare: check whether required host is defined
	$GFSERVICE $DEBUG check_hostids_defined - \
		"gfmd1 gfmd2 gfsd1 gfsd2 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	AUTH_TYPE=`$GFSERVICE $DEBUG get-config-gfarm-param gfmd1 AUTH_TYPE`
	if [ X$AUTH_TYPE = Xgsi ] || [ X$AUTH_TYPE = Xgsi_auth ]; then
		$GFSERVICE $DEBUG grid_proxy_init client1
	fi

	# prepare: create mount point
	MOUNT_POINT=mnt_$TEST_EXEC_ID
	$GFSERVICE $DEBUG exec_ssh client1 mkdir $MOUNT_POINT

	# prepare: write file with gfreg
	GFARM_FILE1=$GFARM_HOME/${TEST_EXEC_ID}_1
	echo $TEST_EXEC_ID | $GFSERVICE $DEBUG read_and_register client1 \
		$GFARM_FILE1 gfmd1 gfsd2

	# prepare: stop gfsd
	$GFSERVICE $DEBUG stop-gfsd gfsd1

	# prepare: make network interface down
	$GFSERVICE $DEBUG ifdown gfmd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifdown on gfmd1"
		return $RESULT_FATAL
	fi

	# prepare: make network interface down
	$GFSERVICE $DEBUG ifdown gfmd2
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifdown on gfmd2"
		return $RESULT_FATAL
	fi

	# step: write file with gfreg
	GFARM_FILE2=$GFARM_HOME/${TEST_EXEC_ID}_2
	echo $TEST_EXEC_ID | $GFSERVICE $DEBUG read_and_register client1 \
		$GFARM_FILE2 gfmd1
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: unexpectedly suceeded to write a file"
		set_result RESULT $RESULT_XPASS
	fi

	# step: read file with gfexport
	$GFSERVICE $DEBUG export_file client1 $GFARM_FILE1 gfmd1
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: unexpectedly suceeded to read a file"
		set_result RESULT $RESULT_XPASS
	fi

	# step: add an user with gfuser
	$GFSERVICE $DEBUG gfcmd client1 gfuser -c $TEST_EXEC_ID \
		"\"user create by test\"" "/home/$TEST_EXEC_ID" "\"\""
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: unexpectedly suceeded to create a user"
		set_result RESULT $RESULT_XPASS
	fi

	# step: show users with gfuser
	$GFSERVICE $DEBUG gfcmd client1 gfuser -l
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: unexpectedly suceeded to list users"
		set_result RESULT $RESULT_XPASS
	fi

	# step: start gfsd
	$GFSERVICE $DEBUG start-gfsd gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to start gfsd"
		set_result RESULT $RESULT_FAIL
	fi

	# step: mount
	$GFSERVICE $DEBUG mount client1 $MOUNT_POINT
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to mount Gfarm file system"
		set_result RESULT $RESULT_FAIL
	fi

	# step: make network interface up
	$GFSERVICE $DEBUG ifup gfmd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifup on gfmd1"
		return $RESULT_FATAL
	fi

	# step: make network interface up
	$GFSERVICE $DEBUG ifup gfmd2
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifup on gfmd2"
		return $RESULT_FATAL
	fi

	# step: unmount
	$GFSERVICE $DEBUG umount client1 $MOUNT_POINT

	# step: write file with gfreg
	echo $TEST_EXEC_ID | $GFSERVICE $DEBUG read_and_register client1 \
		$GFARM_FILE2 gfmd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to write files"
		set_result RESULT $RESULT_FAIL
	fi

	# step: read file with gfexport
	$GFSERVICE $DEBUG export_file client1 $GFARM_FILE1 gfmd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to read files"
		set_result RESULT $RESULT_FAIL
	fi

	# step: add an user with gfuser
	$GFSERVICE $DEBUG gfcmd client1 gfuser -c $TEST_EXEC_ID \
		"\"user create by test\"" "/home/$TEST_EXEC_ID" "\"\""
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to add user"
		set_result RESULT $RESULT_FAIL
	fi

	# step: show users with gfuser
	$GFSERVICE $DEBUG gfcmd client1 gfuser -l
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to show user"
		set_result RESULT $RESULT_FAIL
	fi

	# step: restart gfsd
	$GFSERVICE $DEBUG restart-gfsd gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to start gfsd"
		set_result RESULT $RESULT_FAIL
	fi

	# step: mount
	$GFSERVICE $DEBUG mount client1 $MOUNT_POINT
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to mount gfarm"
		set_result RESULT $RESULT_FAIL
	fi

	# step: create file
	GFARM_FILE3=$MOUNT_POINT/${TEST_EXEC_ID}_3
	$GFSERVICE $DEBUG exec_ssh client1 "echo $TEST_EXEC_ID > $GFARM_FILE3"
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to create file"
		set_result RESULT $RESULT_FAIL
	fi

	# cleanup: remove files
	$GFSERVICE $DEBUG gfcmd client1 gfrm -f $GFARM_FILE1 $GFARM_FILE2
	$GFSERVICE $DEBUG exec_ssh client1 rm -f $GFARM_FILE3

	# cleanup: delete user
	$GFSERVICE $DEBUG gfcmd client1 gfuser -d $TEST_EXEC_ID

	# cleanup: unmount
	$GFSERVICE $DEBUG umount client1 $MOUNT_POINT

	# cleanup: remove mount point
	$GFSERVICE $DEBUG exec_ssh client1 rmdir $MOUNT_POINT

	return $RESULT
}
