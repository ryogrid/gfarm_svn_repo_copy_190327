#
# Test case for check behavior when mount gfarm in gfmd failing over
#
load	"gfarm_v2::check_journal_seqnum_max" \
	"gfarm_v2::check_gfmd_connected" \
	"gfarm_v2::check_gfmd_master" \
	"gfarm_v2::failback"

#
# Test parameters
#
# SLEEP_SEC:	Second to sleep before make gfmd fail over
# TIMEOUT:	  timeout sec for starting/stopping gfmd
# RETRY_COUNT:	  retry number to check master/slave
test_mount_in_gfmd_failover()
{
	RESULT=$RESULT_PASS

	# default parameter
	SLEEP_SEC=${SLEEP_SEC-"3"}
	TIMEOUT=${TIMEOUT-"10"}
	RETRY_COUNT=${RETRY_COUNT-"10"}
	RETRY_INTERVAL=${RETRY_COUNT-"5"}

	# prepare: check whether required host is defined
	$GFSERVICE systest::gfarm_v2::check_hostids_defined - "gfmd1 gfmd2 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	AUTH_TYPE=`$GFSERVICE get-config-gfarm-param gfmd1 AUTH_TYPE`
	if [ X$AUTH_TYPE = Xgsi ] || [ X$AUTH_TYPE = Xgsi_auth ]; then
		$GFSERVICE systest::gfarm_v2::grid_proxy_init client1
	fi

	# prepare: create mount point
	MOUNT_POINT=mnt_$TEST_EXEC_ID
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 mkdir $MOUNT_POINT

	# step: stop gfmd on gfmd1
	$GFSERVICE stop-gfmd gfmd1
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to stop gfmd on gfmd1"

	# step: mount
	$GFSERVICE mount client1 $MOUNT_POINT -o modules=subdir \
		-o subdir=$GFARM_HOME &
	MOUNT_PID=$!

	# wait a bit for a process starts making files
	sleep $SLEEP_SEC

	# step: promote gfmd on gfmd2
	$GFSERVICE promote-gfmd gfmd2
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to promote gfmd on gfmd2"

	# step: set gfmd on gfmd1 to be slave
	$GFSERVICE -t $TIMEOUT start-gfmd-slave gfmd1
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to start gfmd on gfmd1" \
		"as slave"

	wait $MOUNT_PID
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to mount Gfarm file system"
		set_result RESULT $RESULT_FAIL
	fi

	# step: check whether slave gfmd is connected to master
	check_gfmd_connected gfmd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfmd1 is not connected to master"
		set_result RESULT $RESULT_FAIL
	fi

	# step: check Gfarm is mounted
	FOUND=1
	DIRS=`$GFSERVICE systest::gfarm2fs::exec_ssh client1 df | \
		awk '/gfarm2fs/ {print $6}'`
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to check mount point"
		set_result RESULT $RESULT_XFAIL
	fi

	for DIR in $DIRS; do
		if [ X$DIR = $MOUNT_POINT ]; then
			FOUND=0
			break
		fi
	done
	if [ ! $FOUND ]; then
		log_warn "$TESTNAME: failed to check mount point"
		set_result RESULT $RESULT_XFAIL
	fi

	# step: check whether journal seqnum max is same
	check_journal_seqnum_max gfmd1 gfmd2
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: journal seqnum max is not same"
		set_result RESULT $RESULT_FAIL
	fi

	# cleanup: failback
	failback gfmd1 gfmd2 client1 $TIMEOUT $RETRY_COUNT
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to make gfmd on gfmd1" \
		"as master"

	# cleanup: unmount
	$GFSERVICE umount client1 $MOUNT_POINT
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 rmdir $MOUNT_POINT

	return $RESULT
}
