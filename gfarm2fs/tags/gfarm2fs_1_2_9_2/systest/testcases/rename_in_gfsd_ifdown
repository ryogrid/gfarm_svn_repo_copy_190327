#
# Test case for renaming a file which has replication, when gfsd network
# interface is down
#
load	"gfarm2fs::calc_checksum" \
	"gfarm_v2::generate_testdata" \
	"gfarm2fs::wait_for_gfsd_connect" \
	"gfarm2fs::wait_for_gfsd_disconnect" \
	"gfarm_v2::check_replica_num" \
	"gfarm_v2::check_file_location"

#
# Test parameters
#
# GFARM_HOME:	A directory path of Gfarm which this test will be executed
# FILE_SIZE:	Size of a file to be created
# RETRY_COUNT:		Retry number to check gfsd connection or number of
#			replicas
# RETRY_INTERVAL:	Retry interval(sec) to check gfsd connection
test_rename_in_gfsd_ifdown()
{
	RESULT=$RESULT_PASS

	# default parameter
	GFARM_HOME=${GFARM_HOME-"/"}
	FILE_SIZE=${FILE_SIZE-"100M"}
	RETRY_COUNT=${RETRY_COUNT-"20"}
	RETRY_INTERVAL=${RETRY_INTERVAL-"30"}

	# prepare: check whether required hosts are defined
	$GFSERVICE systest::gfarm_v2::check_hostids_defined - "gfmd1 gfsd1 gfsd2 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	AUTH_TYPE=`$GFSERVICE get-config-gfarm-param gfmd1 AUTH_TYPE`
	if [ X$AUTH_TYPE = Xgsi ] || [ X$AUTH_TYPE = Xgsi_auth ]; then
		$GFSERVICE systest::gfarm_v2::grid_proxy_init client1
	fi

	# prepare: wait until gfsd get connected
	wait_for_gfsd_connect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is unavailable"
		return $RESULT_FATAL
	fi

	wait_for_gfsd_connect gfsd2 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd2 is unavailable"
		return $RESULT_FATAL
	fi

	# prepare: mount
	MOUNT_POINT=mnt_$TEST_EXEC_ID
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 mkdir $MOUNT_POINT
	$GFSERVICE mount client1 $MOUNT_POINT -o modules=subdir \
		-o subdir=$GFARM_HOME

	# prepare: make a file with replica
	GFARM_FILE=$GFARM_HOME/$TEST_EXEC_ID
	generate_testdata $FILE_SIZE | $GFSERVICE systest::gfarm_v2::read_and_register \
		client1 $GFARM_FILE gfmd1 gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to register file on gfsd1"
		return $RESULT_FATAL
	fi

	$GFSERVICE systest::gfarm2fs::replicate_file client1 $GFARM_FILE gfsd2
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to replicate file on gfsd2"
		return $RESULT_FATAL
	fi

	# prepare: calc checksum
	CHECKSUM=`calc_checksum $FILE_SIZE`

	# prepare: get spool file path
	SPOOL_PATH=`$GFSERVICE gfcmd client1 gfspoolpath $GFARM_FILE`

	# prepare: make network interface down
	$GFSERVICE systest::gfarm2fs::ifdown gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifdown on gfsd1"
		return $RESULT_FATAL
	fi

	# step: wait until gfsd1 get disconnected
	wait_for_gfsd_disconnect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is available unexpectedly"
		return $RESULT_FATAL
	fi

	# step: rename a file
	MOUNT_FILE_SRC=$MOUNT_POINT/$TEST_EXEC_ID
	MOUNT_FILE_DST=$MOUNT_POINT/${TEST_EXEC_ID}_dst
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 "mv $MOUNT_FILE_SRC $MOUNT_FILE_DST"
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to rename a file"
		set_result RESULT $RESULT_FAIL
	fi

	# step: check number of replicas
	GFARM_FILE_DST=$GFARM_HOME/${TEST_EXEC_ID}_dst
	check_replica_num client1 $GFARM_FILE_DST 2 $RETRY_COUNT
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: number of file replica is not enough"
		set_result RESULT $RESULT_XFAIL
	fi

	# step: compare check sum of spool file
	CHECKSUM_GFSD1=`$GFSERVICE systest::gfarm2fs::spool_file_checksum gfsd1 $SPOOL_PATH`
	if [ X$CHECKSUM_GFSD1 = X ]; then
		log_warn "$TESTNAME: fail to get checksum of a spool file"
		set_result RESULT $RESULT_FAIL
	fi

	CHECKSUM_GFSD2=`$GFSERVICE systest::gfarm2fs::spool_file_checksum gfsd2 $SPOOL_PATH`
	if [ X$CHECKSUM_GFSD2 = X ]; then
		log_warn "$TESTNAME: fail to get checksum of a spool file"
		set_result RESULT $RESULT_FAIL
	fi

	if [ X$CHECKSUM_GFSD1 != X$CHECKSUM ]; then
		log_warn "$TESTNAME: checksum of file is different to original"
		set_result RESULT $RESULT_FAIL
	fi

	if [ X$CHECKSUM_GFSD2 != X$CHECKSUM ]; then
		log_warn "$TESTNAME: checksum of file is different to original"
		set_result RESULT $RESULT_FAIL
	fi

	# step: check original replica does not appear in gfwhere
	check_file_location $GFARM_FILE_DST gfsd1 client1
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: replica at disconnected gfsd1 appeared" \
			"in gfwhere"
		set_result RESULT $RESULT_XPASS
	fi

	check_file_location $GFARM_FILE_DST gfsd2 client1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: replica disappeared from gfsd2"
		set_result RESULT $RESULT_FAIL
	fi

	# step: make network interface up
	$GFSERVICE systest::gfarm2fs::ifup gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifup on gfsd1"
		return $RESULT_FATAL
	fi

	# step: check original spool file is there
	$GFSERVICE systest::gfarm2fs::spool_file_exists gfsd1 $SPOOL_PATH
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: cannot find spool file on gfsd1"
		set_result RESULT $RESULT_XFAIL
	fi

	$GFSERVICE systest::gfarm2fs::spool_file_exists gfsd2 $SPOOL_PATH
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: cannot find spool file on gfsd2"
		set_result RESULT $RESULT_XFAIL
	fi

	# cleanup: remove files
	$GFSERVICE gfcmd client1 gfrm -f $GFARM_FILE_DST

	# cleanup: unmount
	$GFSERVICE umount client1 $MOUNT_POINT
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 rmdir $MOUNT_POINT

	return $RESULT
}
