#
# Test case for check behavior when gfsd network interface is down
# in reading files
#
load "gfarm_v2::generate_testdata"
load "gfarm2fs::wait_for_gfsd_connect"

#
# Test parameters
#
# GFARM_HOME:	A directory path of Gfarm which this test will be executed
# FILE_SIZE:	Size of a file to be created
# SLEEP_SEC:	Second to sleep before make network interface down
#
setup_gfsd_ifdown_in_read()
{
	# define mount point
	MOUNT_POINT=mnt_$TEST_EXEC_ID

	# default parameter
	GFARM_HOME=${GFARM_HOME-"/"}
	FILE_SIZE=${FILE_SIZE-"100M"}
	SLEEP_SEC=${SLEEP_SEC-"3"}
	RETRY_COUNT=${RETRY_COUNT-"20"}
	RETRY_INTERVAL=${RETRY_INTERVAL-"30"}

	# miscellaneous parameters
	FILE_PATH=$MOUNT_POINT/$TEST_EXEC_ID

	# prepare: check whether required host is defined
	$GFSERVICE systest::gfarm_v2::check_hostids_defined - "gfmd1 gfsd1 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	# prepare: wait until gfsd get connected
	wait_for_gfsd_connect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is unavailable"
		return $RESULT_FATAL
	fi

	# prepare: mount
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 mkdir $MOUNT_POINT
	$GFSERVICE mount client1 $MOUNT_POINT -o modules=subdir \
		-o subdir=$GFARM_HOME

	# prepare: make file
	GFARM_FILE=$GFARM_HOME/$TEST_EXEC_ID
	generate_testdata $FILE_SIZE | $GFSERVICE systest::gfarm_v2::read_and_register \
		client1 $GFARM_FILE gfmd1 gfsd1

	return $RESULT_PASS
}

test_gfsd_ifdown_in_read()
{
	RESULT=$RESULT_PASS

	# step: read files in background
	$GFSERVICE systest::gfarm2fs::read_file client1 $FILE_PATH &
	READ_PID=$!

	# wait a bit for a process starts reading files
	sleep $SLEEP_SEC

	# step: make network interface down
	$GFSERVICE systest::gfarm2fs::ifdown gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifdown on gfsd1"
		return $RESULT_FATAL
	fi

	wait $READ_PID
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: unexpectedly suceeded to read a file"
		set_result RESULT $RESULT_XPASS
	fi

	# step: make network interface up
	$GFSERVICE systest::gfarm2fs::ifup gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifup on gfsd1"
		return $RESULT_FATAL
	fi

	# step: wait until gfsd get connected
	wait_for_gfsd_connect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is unavailable"
		return $RESULT_FATAL
	fi

	# step: read files
	$GFSERVICE systest::gfarm2fs::read_file client1 $FILE_PATH
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to read files"
		set_result RESULT $RESULT_FAIL
	fi

	return $RESULT
}

teardown_gfsd_ifdown_in_read()
{
	# cleanup: make network interface up
	$GFSERVICE systest::gfarm2fs::ifup gfsd1

	# cleanup: remove files
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 rm -r $FILE_PATH

	# cleanup: unmount
	$GFSERVICE umount client1 $MOUNT_POINT
	$GFSERVICE systest::gfarm2fs::exec_ssh client1 rmdir $MOUNT_POINT

	return $RESULT_PASS
}
