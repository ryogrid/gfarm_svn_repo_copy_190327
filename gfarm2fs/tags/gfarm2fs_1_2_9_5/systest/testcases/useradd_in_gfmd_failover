#
# Test case for check behavior when add a user in gfmd failing over
#
load "gfarm_v2::check_journal_seqnum_max"
load "gfarm_v2::check_gfmd_connected"
load "gfarm_v2::check_gfmd_master"
load "gfarm_v2::failback"

#
# Test parameters
#
# SLEEP_SEC:	Second to sleep before make gfmd fail over
# TIMEOUT:	  timeout sec for starting/stopping gfmd
# RETRY_COUNT:	  retry number to check master/slave
#
setup_useradd_in_gfmd_failover()
{
	# default parameter
	SLEEP_SEC=${SLEEP_SEC-"3"}
	TIMEOUT=${TIMEOUT-"10"}
	RETRY_COUNT=${RETRY_COUNT-"10"}
	RETRY_INTERVAL=${RETRY_COUNT-"5"}

	# prepare: check whether required host is defined
	$GFSERVICE systest::gfarm_v2::check_hostids_defined - "gfmd1 gfmd2 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	return $RESULT_PASS
}

test_useradd_in_gfmd_failover()
{
	RESULT=$RESULT_PASS

	# step: stop gfmd on gfmd1
	$GFSERVICE stop-gfmd gfmd1
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to stop gfmd on gfmd1"

	# step: add user
	$GFSERVICE gfcmd client1 gfuser -c $TEST_EXEC_ID \
		"\"user create by test\"" "/home/$TEST_EXEC_ID" "\"\"" &
	GFCMD_PID=$!

	# wait a bit for a process starts making files
	sleep $SLEEP_SEC

	# step: promote gfmd on gfmd2
	$GFSERVICE promote-gfmd gfmd2
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to promote gfmd on gfmd2"

	# step: set gfmd on gfmd1 to be slave
	$GFSERVICE -t $TIMEOUT start-gfmd-slave gfmd1
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to start gfmd on gfmd1" \
		"as slave"

	wait $GFCMD_PID
	if [ $? -eq 0 ]; then
		NEED_USERDEL=true
	else
		log_warn "$TESTNAME: failed to add a user"
		set_result RESULT $RESULT_XFAIL
	fi

	# step: check whether slave gfmd is connected to master
	check_gfmd_connected gfmd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfmd1 is not connected to master"
		set_result RESULT $RESULT_FAIL
	fi

	# step: check user is added
	USER=`$GFSERVICE gfcmd client1 gfuser | grep $TEST_EXEC_ID`
	if [ X$USER = X ]; then
		log_warn "$TESTNAME: failed to find a user"
		set_result RESULT $RESULT_XFAIL
	fi

	# step: check whether journal seqnum max is same
	check_journal_seqnum_max gfmd1 gfmd2
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: journal seqnum max is not same"
		set_result RESULT $RESULT_FAIL
	fi

	return $RESULT
}

teardown_useradd_in_gfmd_failover()
{
	# cleanup: failback
	failback gfmd1 gfmd2 client1 $TIMEOUT $RETRY_COUNT
	[ $? -ne 0 ] && log_warn "$TESTNAME: failed to make gfmd on gfmd1" \
		"as master"

	# cleanup: remove user
	if [ X$NEED_USERDEL = Xtrue ]; then
		$GFSERVICE gfcmd client1 gfuser -d $TEST_EXEC_ID
	fi

	return $RESULT_PASS
}
