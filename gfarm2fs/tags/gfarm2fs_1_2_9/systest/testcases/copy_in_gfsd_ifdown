#
# Test case for copying a file which has replication, when gfsd network
# interface is down
#
load	"calc_checksum" \
	"generate_testdata" \
	"wait_for_gfsd_connect" \
	"wait_for_gfsd_disconnect" \
	"check_replica_num" \
	"check_file_location"

#
# Test parameters
#
# GFARM_HOME:	A directory path of Gfarm which this test will be executed
# FILE_SIZE:	Size of a file to be created
# RETRY_COUNT:		Retry number to check gfsd connection or number of
#			replicas
# RETRY_INTERVAL:	Retry interval(sec) to check gfsd connection
test_copy_in_gfsd_ifdown()
{
	RESULT=$RESULT_PASS

	# default parameter
	GFARM_HOME=${GFARM_HOME-"/"}
	FILE_SIZE=${FILE_SIZE-"100M"}
	RETRY_COUNT=${RETRY_COUNT-"20"}
	RETRY_INTERVAL=${RETRY_INTERVAL-"30"}

	# prepare: check whether required hosts are defined
	$GFSERVICE $DEBUG check_hostids_defined - \
		"gfmd1 gfsd1 gfsd2 gfsd3 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	AUTH_TYPE=`$GFSERVICE $DEBUG get-config-gfarm-param gfmd1 AUTH_TYPE`
	if [ X$AUTH_TYPE = Xgsi ] || [ X$AUTH_TYPE = Xgsi_auth ]; then
		$GFSERVICE $DEBUG grid_proxy_init client1
	fi

	# prepare: wait until gfsd get connected
	wait_for_gfsd_connect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is unavailable"
		return $RESULT_FATAL
	fi

	wait_for_gfsd_connect gfsd2 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd2 is unavailable"
		return $RESULT_FATAL
	fi

	wait_for_gfsd_connect gfsd3 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd3 is unavailable"
		return $RESULT_FATAL
	fi

	# prepare: mount
	MOUNT_POINT=mnt_$TEST_EXEC_ID
	$GFSERVICE $DEBUG exec_ssh client1 mkdir $MOUNT_POINT
	$GFSERVICE $DEBUG mount client1 $MOUNT_POINT -o modules=subdir \
		-o subdir=$GFARM_HOME

	# prepare: make directory
	TEST_DIR=$MOUNT_POINT/$TEST_EXEC_ID
	SRC_DIR=$TEST_DIR/src
	DST_DIR=$TEST_DIR/dst
	$GFSERVICE $DEBUG exec_ssh client1 mkdir -p $SRC_DIR $DST_DIR

	# prepare: make a file with replica
	GFARM_FILE_SRC=$GFARM_HOME/$TEST_EXEC_ID/src/$TEST_EXEC_ID
	generate_testdata $FILE_SIZE | $GFSERVICE $DEBUG read_and_register \
		client1 $GFARM_FILE_SRC gfmd1 gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to register file on gfsd1"
		return $RESULT_FATAL
	fi

	$GFSERVICE $DEBUG replicate_file client1 $GFARM_FILE_SRC gfsd2
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to replicate file on gfsd2"
		return $RESULT_FATAL
	fi

	# prepare: set number of replica to be created
	$GFSERVICE $DEBUG gfcmd client1 gfncopy -s 2 $TEST_EXEC_ID

	# prepare: get spool file path
	SPOOL_PATH_SRC=`$GFSERVICE $DEBUG gfcmd client1 gfspoolpath \
		$GFARM_FILE_SRC`

	# prepare: calc checksum
	CHECKSUM=`calc_checksum $FILE_SIZE`

	# prepare: make network interface down
	$GFSERVICE $DEBUG ifdown gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifdown on gfsd1"
		return $RESULT_FATAL
	fi

	# step: wait until gfsd1 get disconnected
	wait_for_gfsd_disconnect gfsd1 client1 $RETRY_COUNT $RETRY_INTERVAL
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: gfsd1 is available unexpectedly"
		return $RESULT_FATAL
	fi

	# step: copy file
	$GFSERVICE $DEBUG exec_ssh client1 cp $SRC_DIR/$TEST_EXEC_ID $DST_DIR
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to copy a file"
		set_result RESULT $RESULT_FAIL
	fi

	# step: get spool file path
	GFARM_FILE_DST=$GFARM_HOME/${TEST_EXEC_ID}/dst/$TEST_EXEC_ID
	SPOOL_PATH_DST=`$GFSERVICE $DEBUG gfcmd client1 gfspoolpath \
		$GFARM_FILE_DST`

	# step: check number of replicas
	check_replica_num client1 $GFARM_FILE_DST 2 $RETRY_COUNT
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: number of file replica is not enough"
		set_result RESULT $RESULT_XFAIL
	fi

	# step: compare check sum of file
	HOSTS=`$GFSERVICE $DEBUG gfcmd client1 gfwhere $GFARM_FILE_DST`
	for HOST in $HOSTS; do
		HOSTID=`$GFSERVICE $DEBUG get_hostid $HOST`
		CHECKSUM_SPOOL=`$GFSERVICE $DEBUG spool_file_checksum $HOSTID \
			$SPOOL_PATH_DST`
		if [ X$CHECKSUM_SPOOL = X ]; then
			log_warn "$TESTNAME: fail to get checksum of a spool" \
				"file"
			set_result RESULT $RESULT_FAIL
		fi

		if [ X$CHECKSUM_SPOOL != X$CHECKSUM ]; then
			log_warn "$TESTNAME: checksum of file is different to" \
				"original"
			set_result RESULT $RESULT_FAIL
		fi
	done

	# step: check original replica is there
	check_file_location $GFARM_FILE_SRC gfsd2 client1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: replica disappeared from gfsd2"
		set_result RESULT $RESULT_FAIL
	fi

	# step: make network interface up
	$GFSERVICE $DEBUG ifup gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifup on gfsd1"
		return $RESULT_FATAL
	fi

	# step: check original spool file is there
	$GFSERVICE $DEBUG spool_file_exists gfsd1 $SPOOL_PATH_SRC
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: cannot find spool file"
		set_result RESULT $RESULT_FAIL
	fi

	$GFSERVICE $DEBUG spool_file_exists gfsd2 $SPOOL_PATH_SRC
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: cannot find spool file"
		set_result RESULT $RESULT_FAIL
	fi

	# cleanup: remove work directory
	$GFSERVICE $DEBUG exec_ssh client1 rm -rf $TEST_DIR

	# cleanup: unmount
	$GFSERVICE $DEBUG umount client1 $MOUNT_POINT
	$GFSERVICE $DEBUG exec_ssh client1 rmdir $MOUNT_POINT

	return $RESULT
}
