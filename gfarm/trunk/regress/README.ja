Gfarm テストスイート

0. 概要

   このディレクトリでは、いくつかのテストターゲットおよびスクリプトを
   用意しています。
   それぞれのターゲットの用途は下記の通りです。

   ・「make」、「make check」ターゲットあるいは check.sh スクリプト
	現在存在する gfarm 環境に対して、テストスイートを実行します。

   ・「make selfcheck」、
     「make selfcheck-バックエンド」、
     「make selfcheck-バックエンド版」、
     「make selfcheck-バックエンド版-認証方式」、
     「make selfcheck-バックエンド版-認証方式-agent利用方式」ターゲット
	自ホストだけで構成される一時的なテスト用 gfarm 環境を作成し、
        check.sh スクリプトを実行します。

	すべて組合せでテストを行ないたい場合には「make selfcheck」、
	特定の組み合わせだけでテストを行ないたい場合には、
	たとえば「make selfcheck-postgresql2-sharedsecret-agent_enable」
	のようにしてテストすると良いでしょう。

   ・「make xfail-check」ターゲット
	"expected failure" ($exit_xfail) を返すにも関わらず、その理由が
	ファイル XFAIL に記述されてないテストケースを調べます。

1. 「make」、「make check」ターゲットあるいは check.sh スクリプト

   このターゲットは、現在既に設定されている gfarm 環境内で、
   テストスイートを実行します。

1.1. 実行に必要な準備

   ・テスト対象の Gfarm 環境の構築が完了している必要があります。

   ・システムコールをフックするための設定をします。doc/README.hook.* を
     参照して、使用する OS/シェルごとに必要な設定 (LD_PRELOAD 設定など)
     を行ってください。

   ・テスト対象のバイナリの bin ディレクトリを、$PATH の先頭に加えてください。

   ・"gfhost -l" で、2つ以上のホストが認証可能になっていることを確認して
     ください。

   ・"gfcd" で "gfarm:/ユーザ名" というディレクトリが作成されていることを
     確認してください。 

   ・このテストでは、gfexec/gfrun を用いて、リモートホストでコマンドを
     実行します。このため、下記の点に注意してください。

     - リモートホスト側でも、互換性のある gfsd が動作していること
     - リモートホスト側でも、互換性のある gfexec コマンドが $PATH 上に
       存在すること。(gfexec はリモートホストで、絶対パス名の指定なしで
       実行されますから、対話的に $PATH を設定するだけでは不十分であり、
       .bashrc や .cshrc で設定する必要があります。)
     - リモートホスト側でも、同一の gfarm.conf (あるいは .gfarmrc) が
       参照されること。(対話的に $GFARM_CONFIG_FILE を設定するだけでは
       不十分であり、設定するなら、.bashrc や .cshrc で行なう必要があります。)

   ・このテストでは、scp コマンドを使って、ファイルシステムノードのうちの
     1台へファイルをコピーします。このため、対話的操作なしで、全ての
     ファイルシステムノードへ scp できる状態になっている必要があります。
     これは通常、ssh-agent を実行中であり、かつ ssh-add コマンドでパス
     フレーズが入力済の環境であり、かつ ssh の known_hosts ファイルに、
     全ファイルシステムノードが登録済みである必要があります。

1.2. 実行方法

   ファイル regress/schedule にテスト対象ファイルのパス名が登録してあります。
   以下の手順でそれらのスクリプトが実行され、結果の一覧が表示されます。

   configure コマンドを実行済みの subversion 作業スペースでは、
  「make」あるいは「make check」ターゲットを使ってください。

	$ cd regress
	$ make (または「make check」)

   あるいは、下記のように check.sh コマンドを直接使うこともできます。

	$ cd regress
	$ make all
	$ ./check.sh --prefix インストールプリフィックス

2. 「make selfcheck」、
   「make selfcheck-バックエンド」、
   「make selfcheck-バックエンド版」、
   「make selfcheck-バックエンド版-認証方式」、
   「make selfcheck-バックエンド版-認証方式-agent利用方式」ターゲット

   このターゲットは、/var/tmp/`whoami`/ に、自ホストと localhost から
   なるテスト専用 gfarm 環境を構築し、その環境内でテストを行ないます。

   このため、事前にテスト用 gfarm 環境を構築しておく必要はありません。
   また LD_PRELOAD 環境変数の設定も自動的に行なうので、テスト前にユーザ
   が設定する必要はありません。

   selfcheck は、利用可能なすべてのバックエンドに対してテストを行ないます。
   selfcheck-postgresql および selfcheck-ldap は、それぞれ PostgreSQL
   バックエンドおよび LDAP バックエンドに対してテストを行ないます。

  「make selfcheck」は、すべての組み合わせでテストを実施します。
  「make selfcheck-バックエンド」は、
	指定したバックエンドに対して、すべての認証方式、
	すべての gfarm_agent 利用方式の組み合わせのテストを行ないます。
  「make selfcheck-バックエンド版」は、
	指定したバックエンドの指定した版に対して、すべての認証方式、
	すべての gfarm_agent 利用方式の組み合わせのテストを行ないます。
  「make selfcheck-バックエンド版-認証方式」は、
	指定したバックエンドの指定した版、指定した認証方式に対して、
	すべての gfarm_agent 利用方式のテストを行ないます。
  「make selfcheck-バックエンド版-認証方式-agent利用方式」は、
	指定したバックエンドの指定した版、指定した認証方式、
	指定した gfarm_agent 利用方式に対してテストを行ないます。

   なお、テスト結果のサマリー表示があるのは、「make selfcheck」のみです。
   それ以外のターゲットでサマリー表示をしたい場合には、下記のように、
   テストしたいターゲットの前に selfcheck_clear
   テストしたいターゲットの後に selfcheck_summary
   を指定してください。
	make selfcheck_clear selfcheck-postgresql selfcheck_smmary

  バックエンド、認証方式、gfarm_agent 利用方式のそれぞれには、下記の値が
  指定できます。
	バックエンド: postgresql ldap
	バックエンド版: postgresql1 postgresql2 ldap
	認証方式: sharedsecret gsi gsi_auth
	gfarm_agent 利用方式: agent_disable agent_enable agent_only
		agent_disable を指定した場合、gfarm_agent を利用しません。
		agent_enable を指定した場合、gfarm_agent を使ってテストします。
		agent_only を指定した場合、gfarm_agent を起動し、クライアント
			からメタデータバックエンドサーバへのアクセスを禁止して
			テストします。

2.1. 実行に必要な準備

     - テスト対象のバイナリ中の gfexec コマンドが検索されるように、
       .bashrc や .cshrc の中で環境変数 $PATH の先頭に、テスト対象の
       バイナリの bin ディレクトリを設定していること。
       (gfrcmd や gfrun から呼び出された gfexec は、リモートホストで、
	絶対パス名の指定なしで実行されますから、対話的に $PATH を設定
	するだけでは不十分であり、.bashrc や .cshrc で設定する必要があります。)
     - .bashrc や .cshrc の中で環境変数 $GFARM_CONFIG_FILE に、
       /var/tmp/`whoami`/etc/gfarm.conf を設定していること。
       (「make selfcheck」が内部で呼び出す config.sh は、テスト環境用の
	gfarm.conf を /var/tmp/`whoami`/etc/ に生成します。
	gfrcmd や gfrun コマンドでリモートホストに呼び出したコマンドに、
	この gfarm.conf のパス名を伝えるためには、.bashrc や .cshrc の
	設定が必要です。)
     - Linux の場合は、/usr/lib/gfarm/ 以下に、glibc-not-hidden パッケージ
       附属の shared object がインストールされていること。
     - このテストでは、scp コマンドを使って、自ホストへファイルをコピー
       します。このため、対話的操作なしで、自ホストへ scp できる状態に
       なっている必要があります。これは通常、ssh-agent を実行中であり、
       かつ ssh-add コマンドでパスフレーズが入力済の環境であり、かつ
       ssh の known_hosts ファイルに、自ホストが登録済みである必要があり
       ます。

2.2. 実行方法

   configure コマンドを実行済みの subversion 作業スペースで下記を行ないます。

	$ cd regress
	$ make selfcheck

3. regress ディレクトリの内容

   check.sh	「make check」ターゲットの実体です。
		下記の regress.sh を何回か呼び出すスクリプトです。

   regress.sh   引数で指定したファイルにリストされたテストプログラムを
		順次実行して結果を表示するスクリプトです。

   schedule     regress.sh がデフォルトで参照するテストプログラムのリストです。
		gfarm 本体に附属するコマンドやライブラリのテストがリストされて
		います。

   schedule.hook
		schedule ファイルの代わりに、regress.sh に指定する
		テストプログラムのリストです。
		OS 附属のコマンド群に対するテストがリストされています。
		check.sh は、gfs_hook や GfarmFS-FUSE の環境設定を行なった後、
		このテストを実行します。

   config.sh	「make selfcheck」ターゲットの実体です。
		hostname コマンドが返すホスト名および localhost の 2 つの
		gfsd と、メタデータサーバからなるテスト用の gfarm 環境を
		作成し、引数に与えたコマンドを実行します。
		コマンド引数を省略した場合は check.sh を実行します。
		-k オプションを与えない限り、終了後、その gfarm 環境を消去
		します。
		例えば下記のように引数を指定します。
		--prefix で指定するのは、テスト対象の Gfarm がインストールされ
		ているディレクトリ (Gfarm の configure 時に --prefix オプ
		ションで指定したディレクトリ) です。
		$ cd regress
		$ ./config.sh --prefix /usr --config-prefix /var/tmp/`whoami` -b postgresql
		$ ./config.sh --prefix /usr --config-prefix /var/tmp/`whoami` -b ldap

   gfs_hook.sh	doc/README.hook.{en,ja} にあるシステムコールフックのための
		環境設定を行なったのち、引数にあるコマンドを実行するスクリ
		プト。
		check.sh の中から呼び出されます。

   loop.sh      check.sh を無限回実行するスクリプト

   tst.sh       引数で与えられたテストプログラムを実行して結果を表示する
                スクリプト

   gftool/      各gfarm コマンドのテストプログラムのディレクトリ
   gfs_hook/    各システムコールフックのテストプログラムのディレクトリ

   data/        テストプログラムが使用するテストデータファイルのディレクトリ

   regress.conf 各スクリプト、プログラムが参照するディレクトリ、ファイル、
                シグナルの定義を記述しているファイル

   Makefile     check.sh, loop.sh の実行などに使用する makefile

4. テストケースの書き方

4.1. 注意事項

   ・各テストはすべて独立して動作すること。
     (他のテストの結果に依存しない)

   ・「make selfcheck」の環境ではなく、ユーザの環境でも動作すること。
     この時、テストケース動作のための条件に合致しなくなることがある。
     その場合には $exit_unsupported を返す。

   ・一時ファイルを消し忘れない。

   ・ユーザのファイルを誤って消さない。
     gfarm ファイルシステム上のファイルを勝手に消すのも、もちろんまずい。

   ・並列にテストを実行しても問題ないようにする。
     このために、下記の注意が必要。
	$localtop 以下に作成する一時ファイル:
		ファイル名中にプロセスIDを入れる。
	gfarm ファイルシステム上に作成する一時ファイル:
		ファイル名中にホスト名とプロセスIDの両方を入れる。
		$gftmp および $hooktmp には、既にホスト名とプロセスIDが
		含まれているので、これらの変数を利用する場合には、
		このことを気にする必要がない。

4.2. テストケースを書く際に利用する変数

   $REGRESS_HOOK_MODE
		UNIX コマンドのテストがフック/GfarmFS-FUSE のいずれで
		実行されているかを示す環境変数。
			とりうる値	意味
			"gfs_hook"	フックでのテスト
		 	"gfarmfs"	GfarmFS-FUSE でのテスト

   $REGRESS_GFARMFS_OPT
		GfarmFS-FUSE でのテストで gfarmfs コマンドに対して、
		どのような GfarmFS のオプションが指定されているかを示す環境変数

   $REGRESS_FUSE_OPT
		GfarmFS-FUSE でのテストで gfarmfs コマンドに対して、
		どのような FUSE のオプションが指定されているかを示す環境変数

   $data	regress/data/ ディレクトリのパス名。
		注: 相対パスのことがあるので、cd するとアクセスできなくなる。
		(もしこれが問題なら、絶対パスに変更するかも…)

   $exit_code	終了コードを保持する変数。テストケースの最終行は、
			exit $exit_code
		で終了することを期待されている。
		設定できる値は下記の通り:
		$exit_pass		成功
		$exit_fail		失敗
		$exit_xpass		成功だが、known bug で失敗する筈だった
		$exit_xfail		失敗だが、それは既知の問題 (known bug)
		$exit_unresolved	想定外の状況。成功か失敗か不明。
		$exit_untested		テストせず (テストケースの作成が未了)
		$exit_unsupported	テストせず (この環境ではテスト不能)
		$exit_trap		Control-C などで中断させられた。
		デフォルトでは、exit_code には $exit_fail が設定されている。
		なお、これらのシンボルの意味は ($exit_trap 以外) 下記を真似た。
		dejagnu:
		    http://www.gnu.org/software/dejagnu/manual/x397.html
		POSIX 1003.3 standard for test frameworks:
		    http://www.gnu.org/software/dejagnu/manual/x47.html#posix
		詳しい解説も、これらの URL を参照のこと。

   $gftmp	gfarm ファイルシステム上に作る、テンポラリファイルや
		テンポラリディレクトリの名前。
		複数のテンポラリファイルが必要な場合には、「gfmkdir $gftmp」
		してから、$gftmp の下にファイルを作ることが期待されている。
		値は "gfarm:./ホスト名.スクリプト名.$PID" という形式。

   $hooktmp	フックが、gfarm ファイルシステム上に作る、テンポラリファイルや
		テンポラリディレクトリの名前。
		複数のテンポラリファイルが必要な場合には、「mkdir $hooktmp」
		してから、$hooktmp の下にファイルを作ることが期待されている。
		値は "/gfarm/ユーザ名/ホスト名.スクリプト名.$PID" という形式。

   $localtop	一時ファイルを作成するローカルディレクトリ名。通常は "/tmp"

   $shell	シェル。値は "bash" ないし "bash -x" となっているのが普通。
		スクリプトは、「sh スクリプト名」のように sh をハードコード
		して呼び出したり、あるいは「スクリプト名」のように直接呼び
		出したりするのではなく「$shell スクリプト名」のように
		呼び出す。
		こうする必要がある理由は下記の 2点
		・gfs_hook は、bash でしか安定して動作しないが、
		  /bin/sh が bash なのは Linux だけ。
		  といっても、bash をテストケースにハードするのも憚られる。
		・環境変数 GFARM_TEST_DEBUG を設定して、テストケースの
		  実行ログをとる機能が、この変数を利用している。
		  この場合、shell="bash -x" と設定される。

   $testbase	テストスクリプトの存在するディレクトリ名。
		テストスクリプト固有のデータファイルや共用スクリプトに
		アクセスするのに用いる。
		注: 相対パスのことがあるので、cd するとアクセスできなくなる。
		(もしこれが問題なら、絶対パスに変更するかも…)

   $testbin	テスト用バイナリの存在するディレクトリ名。
		「$testbase/コマンド名」のようにして、バイナリにアクセスする
		のに用いる。
		注: 相対パスのことがあるので、cd するとアクセスできなくなる。
		(もしこれが問題なら、絶対パスに変更するかも…)

   $trap_sigs	後処理を期待されているシグナルのリスト。
		テストケースは、下記のように、Control-C で止められた場合
		にも、一時ファイルを残さずに終了することが期待されている。
		  trap 'ここで一時ファイルを消去; exit $exit_trap' $trap_sigs

   また、「make selfcheck」から呼び出されている場合には、下記の環境変数から、
   現在実行中のテストの構成を知ることができます。
	環境変数		とりうる値
	$REGRESS_BACKEND	postgresql ldap
	$REGRESS_AUTH		sharedsecret gsi gsi_auth
	$REGRESS_AGENT		disable enable only
   ただし、この環境変数は、「make check」実行時には設定されていません。
   従って、テストケースは、これらの変数が設定されてない場合でも、動作する
   必要があります。
   また「make check」で、$exit_xfail や $exit_unsupported の結果を正しく
   得たい場合には、手動でこれらの環境変数を設定してやる必要があります。

5. TIPS

   ・環境変数 $GFARM_TEST_DEBUG を設定すると、シェルに -x オプションが
     付加され、ログにデバッグ出力が記録されるようになります。

   ・自ホストだけからなるテスト環境を、一時的に作成してテストしたい場合:
     例えば PostgreSQL バックエンド、sharedsecret 認証、gfarm_agent 使用と
     いう構成の場合、下記のコマンドを実行すると、
	make TEST_TARGET=bash \
		selfcheck-postgresql2-sharedsecret-agent_enable
     自ホストだけで構成される一時的なテスト用 gfarm 環境を作成し、
     その中で bash を起動します。
     そこで「./tst.sh テストスクリプト」を実行すれば、その一時的
     環境内で、個々のスクリプトをテストできます。

     ターゲットは「selfcheck-バックエンド版-認証方式-agent利用方式」の
     形式で指定できます。詳細は 2. を参照してください。

   ・自ホストだけからなるテスト環境を、恒久的に作成したい場合:
     例えば PostgreSQL バックエンド、sharedsecret 認証、gfarm_agent 使用の場合
     下記のコマンドで可能です。
	make TEST_TARGET=true CONFIG_OPT=-k \
		selfcheck-postgresql2-sharedsecret-agent_enable
     テスト環境を置くディレクトリを、「/var/tmp/ユーザ名」以外の
     ディレクトリに変更したい場合には、「CONFIG_PREFIX=ディレクトリ名」
     という変数設定を、make の引数に加えて下さい。

     ターゲットは「selfcheck-バックエンド版-認証方式-agent利用方式」の
     形式で指定できます。詳細は 2. を参照してください。

   ・特定のテストケースを、すべての構成について試験したい場合:
     make 変数 TEST_TARGET に、そのテストを指定して「make check」します。
     たとえば gfs_hook/tool/scp/scp_from_gfarm.sh というテストケースを
     試験したい場合、下記のようにします。
	make TEST_TARGET='./tst.sh gfs_hook/tool/scp/scp_from_gfarm.sh' \
		selfcheck

   ・下記の環境変数を設定しておくと、デフォルトとは異なるポート番号を
     使うことができます。
	環境変数		デフォルト値	意味
	$REGRESS_AGENT_PORT	30603		gfarm_agent のポート
	$REGRESS_BACKEND_PORT	30602		PostgreSQL/OpenLDAPのポート
	$REGRESS_GFMD_PORT	30601		gfmd のポート
	$REGRESS_GFSD_PORT	30600		gfsd のポート

   ・環境変数 $REGRESS_GFARMFS_FUSE に、GfarmFS-FUSE のソースディレクトリを
     設定しておくと、GfarmFS-FUSE 附属のテストも併せて実行します。
     さらに以下の手順で、PostgreSQL のコンパイル済アーカイブファイルを用意し、
     そのファイルを展開したときに作成されるディレクトリ名を環境変数
     $REGRESS_POSTGRESQL に設定しておくと、GarmFS-FUSE 上で PostgreSQL 附属の
     テストも併せて実行します。

     1. PostgreSQL ソースの tar.gz ファイルを用意します。
	この説明では、例として /raid/src/postgresql-8.1.4.tar.gz という
	ファイルを用いるものとします。

     2. tar.gz ファイルを展開し configure, make コマンドを実行します。

	$ cd /raid/src
	$ tar zxf postgresql-8.1.4.tar.gz
	$ cd postgresql-8.1.4
	$ ./configure
	$ make

     3. 作成されたファイルからもとのソース tar.gz ファイルと同名の
	アーカイブファイルを作成します。	

	$ cd ..
	(必要ならば、もとのソース tar.gz ファイルがばセーブしておく)
	$ tar zcf postgresql-8.1.4.tar.gz ./postgresql-8.1.4

     4. 展開されたディレクトリとその下のファイル・ディレクトリを削除します

	$ rm -rf ./postgresql-8.1.4

     5. 展開されたディレクトリパスを環境変数 $REGRESS_POSTGRESQL に設定します。
	
	(bash を使っている場合)
	$ export REGRESS_POSTGRESQL=/raid/src/postgresql-8.1.4
