This is written in Japanese, please look at README.en for English version.]

		       障害発生テストプログラム

● 障害発生テストプログラムについて
===================================

障害発生テストプログラムは、Gfarm 及び Gfarm 監視に関する障害を意図的
に発生させることで、Zabbix の動作確認を行います。


● 障害発生テストケースの実行環境
=================================

本ディレクトリに置かれている障害発生テストプログラムを実行するには、最
低でも以下の 9台のホストが必要です。

    - メタデータノード 3台 (マスター 1台、スレーブ 2台)
    - ファイルシステムノード 2台
    - クライアントノード 2台
    - Zabbix サーバ 2台 (マスターノード 1台、子ノード 1台)

これらすべてのホストが、以下の各要件を満たしている必要があります。

    - Gfarm が導入済みであること
    - Zabbix エージェントが導入・設定済みであること
    - zabbix ユーザが、パスワード不要、tty 不要で sudo が実行可能なこと

本テストプログラムの実行は、上記の 9 台のうち Zabbix サーバの子ノード
のほうで行います。Zabbix サーバの子ノードは、上記の要件に加えて、以下
の要件を満たしている必要があります。

    - zabbix ユーザが全ホストにパスフレーズなし ssh ログイン可能なこと
    - 障害発生・復旧時に zabbix ユーザにメール通知されること

一部のテストケースでは、これらホストのネットワーク I/F を無効にしたり
(ifconfig down を実行)、gfmd, gfsd, PostgreSQL, Zabbix エージェントと
いった各サーバを停止させたりします。また、config-gfarm, config-gfsd の
やり直しを実施するテストケースも含まれます。したがって本テストプログラ
ムの実行は、テスト専用の環境で行うことを強く推奨します。


● 障害発生テストプログラムを実行する際の準備
=============================================

本テストプログラムでは、gfservice コマンドを使用します。gfservice の設
定ファイルとして本ディレクトリに gfservice.conf というファイルを置き、
前項に挙げた全ホスト 9台の情報をここに記述してください。ただし、以下の
点に注意してください。

・各ホストが Gfarm 通信時に使用するネットワーク I/F 名を
  「<ホスト ID>_GFARM_IF」という変数で記述すること。

      例: gfmd1_GFARM_IF=eth0

  一部のテストケースでは、このネットワーク I/F を一時的に無効にします。

・前項「<ホスト ID>_GFARM_IF」が無効になっている状態でも、そのホストと
  通信できる IP アドレスを「<ホスト ID>_CTRL_ADDRESS」という変数で定義
  すること

      例: gfmd1_CTRL_ADDRESS=192.168.0.8

  この IP アドレスを利用して、テストプログラムは当該ホストに ssh ログ
  インを行い、無効にしたネットワーク I/F を復旧します。

・Zabbix サーバの子ノードの設定を、ホスト ID 「zabbix1」で定義すること。
  具体的には、以下の変数を定義しておく必要があります。

    ・zabbix1
    ・zabbix1_GFARM_IF
    ・zabbix1_CTRL_ADDRESS

・Zabbix サーバのマスターノードの設定を、ホスト ID 「zabbix2」で記述す
  ること。具体的には、以下の変数を定義しておく必要があります。

    ・zabbix2
    ・zabbix2_GFARM_IF
    ・zabbix2_CTRL_ADDRESS

以上の変数は、テストプログラムが独自に利用し、gfservice コマンド自身は
認識しません。記述に当たっては、本ディレクトリに gfservice.confのサン
	プルがありますので、それを参考にしてください。

また、一部のテストケースは、malloc というプログラムを使用します。この
malloc は、本ディレクトリにある malloc.c という C 言語プログラムをコン
パイルして作成する必要があります。コンパイルを行うには、C コンパイラや
make コマンドをインストールし、Makefile を必要に応じて適宜編集した上で、

    $ make

を実行してください。


● 障害発生テストプログラムの実行方法
=====================================

・テストケースを個別に実行する場合

  zabbix ユーザでテストケーススクリプトを実行してください。たとえば、
  テストケース FT1-2-1-1 を実行する場合は以下のようになります。

    $ ./FT1-2-1-1_disk_exhausted

・全テストケースを実行する場合

  zabbix ユーザで、以下のクリプトを実行してください。

    $ ./FT-run-all

 
● ファイル一覧
===============

    README.ja                  : 本ファイル
    Makefile                   : malloc.c コンパイル用 Makefile
    gfservice.conf             : gfservice 設定ファイル サンプル
    FT-run-all                 : 全テストケース実行スクリプト
    FT-common                  : テストケーススクリプト共通関数
    FT-config                  : テスト環境の全ホストの Gfarm を自動設定
                                 するスクリプト
    cpu-stress                 : CPU 負荷を発生させるスクリプト
    create-random-file         : 任意サイズのファイルを生成するスクリプト
    FT-set-journal-size        : ジャーナルファイルサイズ変更スクリプト
    FT-unconfig                : テスト環境の全ホストの Gfarm 設定を自動
                                 削除するスクリプト
    malloc.c                   : メモリを消費させるプログラム
    mbox-search                : 通知メール検出スクリプト

それ以外の、ファイル名が "FTx-x-x-x_" (各 x は整数) で始まるファイル
(例: FT1-2-2-1_db_down) は、当該テストケースを実行するスクリプトです。
各テストケースがどのようなテストを行っているかは、

    doc/ja/failure_test_cases.xls

を参照してください。
